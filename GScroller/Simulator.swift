//
//  Simulator.swift
//  GameScrollDemo
//
//  Created by Les R. Titze on 2014.10.14.
//  Copyright (c) 2014 lrtitze. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

let ScreenCorner:CGPoint = CGPointMake(325, 197)
let DeviceScreenWidth:CGFloat  = 300
let DeviceScreenHeight:CGFloat = 225

let BackgroundWidth:CGFloat  = 512
let BackgroundHeight:CGFloat = 384

public class Simulator : NSObject {
  
  
  //// Drawing Methods
  
  public class func drawSimulation(backgroundXOffset: CGFloat, backgroundYOffset: CGFloat, characterXOffset: CGFloat, characterYOffset: CGFloat) {
    //// General Declarations
    let context = UIGraphicsGetCurrentContext()
    
    //// Color Declarations
    let gradientStart = UIColor(red: 0.720, green: 0.984, blue: 1.000, alpha: 1.000)
    let gradientStop1 = UIColor(red: 0.423, green: 0.707, blue: 0.850, alpha: 1.000)
    let gradientStop2 = UIColor(red: 0.825, green: 0.801, blue: 1.000, alpha: 1.000)
    var gradientStop2HueComponent: CGFloat = 1,
    gradientStop2SaturationComponent: CGFloat = 1,
    gradientStop2BrightnessComponent: CGFloat = 1
    gradientStop2.getHue(&gradientStop2HueComponent, saturation: &gradientStop2SaturationComponent, brightness: &gradientStop2BrightnessComponent, alpha: nil)
    
    let bgBorder = UIColor(hue: gradientStop2HueComponent, saturation: 0.8, brightness: gradientStop2BrightnessComponent, alpha: CGColorGetAlpha(gradientStop2.CGColor))
    let gradientEnd = UIColor(red: 0.508, green: 0.554, blue: 0.981, alpha: 1.000)
    let characterColor = UIColor(red: 0.879, green: 0.300, blue: 0.300, alpha: 1.000)
    
    //// Gradient Declarations
    let bgGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientStart.CGColor, UIColor(red: 0.572, green: 0.846, blue: 0.925, alpha: 1.000).CGColor, gradientStop1.CGColor, gradientStop2.CGColor, gradientEnd.CGColor], [0, 0.16, 0.31, 0.67, 1])
    
    //// Variable Declarations
    //        let screenCorner = CGPointMake(325, 197)
    //        let deviceScreenWidth = CGFloat(300)
    //        let deviceScreenHeight = CGFloat(225)
    //        let backgroundWidth = CGFloat(512)
    //        let backgroundHeight = CGFloat(384)
    let bgXOffsetTextPosX = backgroundXOffset / 2.0
    let bgXOffsetText = "\(Int(round(backgroundXOffset)))"
    let bgYOffsetTextPosY = backgroundYOffset / 2.0
    let bgYOffsetText = "\(Int(round(backgroundYOffset)))"
    let chXOffsetText = "\(Int(round(characterXOffset)))"
    let chYOffsetText = "\(Int(round(characterYOffset)))"

    //// Background Drawing
    CGContextSaveGState(context)
    CGContextTranslateCTM(context, backgroundXOffset, backgroundYOffset)
    
    let backgroundRect = CGRectMake(ScreenCorner.x, ScreenCorner.y, BackgroundWidth, BackgroundHeight)
    let backgroundPath = UIBezierPath(rect: backgroundRect)
    CGContextSaveGState(context)
    backgroundPath.addClip()
    let backgroundResizeRatio: CGFloat = min(backgroundRect.width / 512, backgroundRect.height / 384)
    CGContextDrawRadialGradient(context, bgGradient,
      CGPointMake(backgroundRect.midX + 2.09 * backgroundResizeRatio, backgroundRect.midY + -2.09 * backgroundResizeRatio), 355.85 * backgroundResizeRatio,
      CGPointMake(backgroundRect.midX + 161.78 * backgroundResizeRatio, backgroundRect.midY + 83.82 * backgroundResizeRatio), 12.56 * backgroundResizeRatio,
      UInt32(kCGGradientDrawsBeforeStartLocation) | UInt32(kCGGradientDrawsAfterEndLocation))
    CGContextRestoreGState(context)
    bgBorder.setStroke()
    backgroundPath.lineWidth = 1
    backgroundPath.stroke()
    
    CGContextRestoreGState(context)
    
    
    //// DeviceScreen Drawing
    CGContextSaveGState(context)
    
    let deviceScreenPath = UIBezierPath(rect: CGRectMake(ScreenCorner.x, ScreenCorner.y, DeviceScreenWidth, DeviceScreenHeight))
    UIColor.blackColor().setStroke()
    deviceScreenPath.lineWidth = 2
    deviceScreenPath.stroke()
    
    CGContextRestoreGState(context)
    
    
    //// Oval Drawing
    CGContextSaveGState(context)
    CGContextTranslateCTM(context, characterXOffset, characterYOffset)
    
    var ovalPath = UIBezierPath(ovalInRect: CGRectMake(ScreenCorner.x, ScreenCorner.y, 20, 20))
    characterColor.setFill()
    ovalPath.fill()
    
    CGContextRestoreGState(context)
    
    
    //// BgXOffsetDisplay Drawing
    CGContextSaveGState(context)
    CGContextTranslateCTM(context, 300, 178)
    
    let bgXOffsetDisplayRect = CGRectMake(bgXOffsetTextPosX, backgroundYOffset, 50, 16)
    let bgXOffsetDisplayStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
    bgXOffsetDisplayStyle.alignment = NSTextAlignment.Center
    
    let bgXOffsetDisplayFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 12), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: bgXOffsetDisplayStyle]
    
    NSString(string: bgXOffsetText).drawInRect(bgXOffsetDisplayRect, withAttributes: bgXOffsetDisplayFontAttributes);
    
    CGContextRestoreGState(context)
    
    
    //// YOffsetText Drawing
    CGContextSaveGState(context)
    CGContextTranslateCTM(context, 266, 191)
    
    let yOffsetTextRect = CGRectMake(backgroundXOffset, bgYOffsetTextPosY, 50, 16)
    let yOffsetTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
    yOffsetTextStyle.alignment = NSTextAlignment.Right
    
    let yOffsetTextFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 12), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: yOffsetTextStyle]
    
    NSString(string: bgYOffsetText).drawInRect(yOffsetTextRect, withAttributes: yOffsetTextFontAttributes);

    CGContextRestoreGState(context)


    //// Char Y Offset Text Drawing
    CGContextSaveGState(context)
    CGContextTranslateCTM(context, 350, 200)

    let charYOffsetTextRect = CGRectMake(characterXOffset, characterYOffset, 33, 15)
    let charYOffsetTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
    charYOffsetTextStyle.alignment = NSTextAlignment.Left

    let charYOffsetTextFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 12), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: charYOffsetTextStyle]

    NSString(string: chYOffsetText).drawInRect(charYOffsetTextRect, withAttributes: charYOffsetTextFontAttributes);

    CGContextRestoreGState(context)


    //// Char X Offset Text Drawing
    CGContextSaveGState(context)
    CGContextTranslateCTM(context, 310, 224)

    let charXOffsetTextRect = CGRectMake(characterXOffset, characterYOffset, 50, 16)
    let charXOffsetTextStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
    charXOffsetTextStyle.alignment = NSTextAlignment.Center

    let charXOffsetTextFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: 12), NSForegroundColorAttributeName: UIColor.blackColor(), NSParagraphStyleAttributeName: charXOffsetTextStyle]

    NSString(string: chXOffsetText).drawInRect(charXOffsetTextRect, withAttributes: charXOffsetTextFontAttributes);

    CGContextRestoreGState(context)
  }
  
}

@objc protocol StyleKitSettableImage {
  var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
  var selectedImage: UIImage! { get set }
}
