//
//  Simulator.swift
//  GameScrollDemo
//
//  Created by Les R. Titze on 2014.10.14.
//  Copyright (c) 2014 lrtitze. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Simulator : NSObject {

    //// Drawing Methods

    public class func drawSimulation(backgroundXOffset: CGFloat, backgroundYOffset: CGFloat, characterXOffset: CGFloat, characterYOffset: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let gradientStart = UIColor(red: 0.720, green: 0.984, blue: 1.000, alpha: 1.000)
        let gradientStop1 = UIColor(red: 0.423, green: 0.707, blue: 0.850, alpha: 1.000)
        let gradientStop2 = UIColor(red: 0.825, green: 0.801, blue: 1.000, alpha: 1.000)
        var gradientStop2HueComponent: CGFloat = 1,
            gradientStop2SaturationComponent: CGFloat = 1,
            gradientStop2BrightnessComponent: CGFloat = 1
        gradientStop2.getHue(&gradientStop2HueComponent, saturation: &gradientStop2SaturationComponent, brightness: &gradientStop2BrightnessComponent, alpha: nil)

        let bgBorder = UIColor(hue: gradientStop2HueComponent, saturation: 0.8, brightness: gradientStop2BrightnessComponent, alpha: CGColorGetAlpha(gradientStop2.CGColor))
        let gradientEnd = UIColor(red: 0.508, green: 0.554, blue: 0.981, alpha: 1.000)
        let characterColor = UIColor(red: 0.279, green: 1.000, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let bgGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientStart.CGColor, UIColor(red: 0.572, green: 0.846, blue: 0.925, alpha: 1.000).CGColor, gradientStop1.CGColor, gradientStop2.CGColor, gradientEnd.CGColor], [0, 0.16, 0.31, 0.67, 1])

        //// Variable Declarations
        let screenCorner = CGPointMake(500, 350)
        let deviceScreenWidth = 600
        let deviceScreenHeight = 450
        let backgroundWidth = 1024
        let backgroundHeight = 768

        //// Background Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, backgroundXOffset, backgroundYOffset)

        let backgroundRect = CGRectMake(screenCorner.x, screenCorner.y, backgroundWidth, backgroundHeight)
        let backgroundPath = UIBezierPath(rect: backgroundRect)
        CGContextSaveGState(context)
        backgroundPath.addClip()
        let backgroundResizeRatio: CGFloat = min(backgroundRect.width / 1024, backgroundRect.height / 768)
        CGContextDrawRadialGradient(context, bgGradient,
            CGPointMake(backgroundRect.midX + 4.19 * backgroundResizeRatio, backgroundRect.midY + -4.19 * backgroundResizeRatio), 711.7 * backgroundResizeRatio,
            CGPointMake(backgroundRect.midX + 323.57 * backgroundResizeRatio, backgroundRect.midY + 167.63 * backgroundResizeRatio), 25.12 * backgroundResizeRatio,
            UInt32(kCGGradientDrawsBeforeStartLocation) | UInt32(kCGGradientDrawsAfterEndLocation))
        CGContextRestoreGState(context)
        bgBorder.setStroke()
        backgroundPath.lineWidth = 1
        backgroundPath.stroke()

        CGContextRestoreGState(context)


        //// DeviceScreen Drawing
        CGContextSaveGState(context)

        let deviceScreenPath = UIBezierPath(rect: CGRectMake(screenCorner.x, screenCorner.y, deviceScreenWidth, deviceScreenHeight))
        UIColor.blackColor().setStroke()
        deviceScreenPath.lineWidth = 2
        deviceScreenPath.stroke()

        CGContextRestoreGState(context)


        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, characterXOffset, characterYOffset)

        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(screenCorner.x, screenCorner.y, 42, 42))
        characterColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)
    }

}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}
